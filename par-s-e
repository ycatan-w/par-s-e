#!/usr/bin/env bash

# =========================
# par-s-e : lightweight script manager
# =========================

# --- Colors ---
RED="\033[0;31m"
RED_FLASH="\033[5;31m"
BACKGROUND_RED="\033[0;41;97m"
GREEN="\033[0;32m"
GREEN_FLASH="\033[5;32m"
YELLOW="\033[0;33m"
YELLOW_FLASH="\033[5;33m"
YELLOW_BOLD="\033[1;33m"
BRIGHT_MAGENTA_BOLD="\033[1;95m"
BRIGHT_YELLOW="\033[2;93m"
BRIGHT_YELLOW_FLASH="\033[5;2;93m"
CYAN="\033[0;36m"
NC="\033[0m"

# --- Repo directory ---
SRC_SCRIPTS_DIR="$(dirname "$(readlink -f "$0")")/scripts"
SRC_SHIMS_DIR="$(dirname "$(readlink -f "$0")")/shims"

# --- Bin & Db dir ---
DST_BIN_DIR="${HOME}/.par-s-e/bin"
DST_SHIMS_DIR="${HOME}/.par-s-e/shims"
DB_SCRIPTS_FILE="${HOME}/.par-s-e/installed.db"
DB_SHIMS_FILE="${HOME}/.par-s-e/installed-shims.db"
SHIMS_SOURCE_FILE="${HOME}/.par-s-e/shims.sources"
mkdir -p "$DST_BIN_DIR" "$DST_SHIMS_DIR"
touch "$DB_SCRIPTS_FILE" "$DB_SHIMS_FILE"

# --- Utility functions ---
error() {
    echo -e "${RED}✖ $*${NC}" >&2
    exit 1
}
overwrite() { echo -e "\r\033[1A\033[0K$*"; }
error_block() {
    local msg="$1"
    local padding=2
    local text_len=${#msg}
    local total_len=$((text_len + padding * 2))
    local line
    line=$(printf "%${total_len}s" " " | tr ' ' ' ')

    echo -e "${BACKGROUND_RED}${line}${NC}"
    printf "${BACKGROUND_RED}%${padding}s%s${NC}${BACKGROUND_RED}%${padding}s${NC}\n" "" "$msg" ""
    echo -e "${BACKGROUND_RED}${line}${NC}"
}
strip_extension() { echo "$1" | sed -E 's/\.(sh|py|pl|rb|js|ts|php|lua|go|rs)$//'; }

# --------------------------
# HELP SYSTEM
# --------------------------
show_help() {
    echo -e "${YELLOW}par-s-e${NC} - lightweight script manager"
    echo
    echo -e "${YELLOW}Usage:${NC}"
    echo "  command [options] [arguments]"
    echo
    echo -e "${YELLOW}Options:${NC}"
    echo -e "$(printf "  ${GREEN}%-12s${NC} %s\n" "-h, --help" "Display help for the given command. When no command is given display help for the ${GREEN}list${NC} command")"
    echo
    echo -e "${YELLOW}Available commands:${NC}"
    echo -e "$(printf "  ${GREEN}%-12s${NC} %s\n" "list" "List commands")"
    echo -e "$(printf "  ${GREEN}%-12s${NC} %s\n" "catalog" "List available/installed scripts")"
    echo -e "$(printf "  ${GREEN}%-12s${NC} %s\n" "install" "Install a script (with optional alias)")"
    echo -e "$(printf "  ${GREEN}%-12s${NC} %s\n" "update" "Update all or a single installed script")"
    echo -e "$(printf "  ${GREEN}%-12s${NC} %s\n" "uninstall" "Remove an installed script")"
    echo -e "$(printf "  ${GREEN}%-12s${NC} %s\n" "help" "Show this help")"
    echo
    echo -e "Run '${YELLOW}par-s-e help <command>${NC}' for more info on a command."
}
show_help_command_description() {
    echo -e "${YELLOW}Description:${NC}"
    echo "  $1"
}
show_help_command_usage() {
    echo -e "${YELLOW}Usage:${NC}"
    echo "  $1"
}
show_help_command_option() {
    echo -e "${YELLOW}Option:${NC}"
    echo -e "$(printf "  ${GREEN}%-12s${NC} %s\n" "-h, --help" "Display help for the given command. When no command is given display help for the ${GREEN}help${NC} command")"
}
show_help_command() {
    case "$1" in
    install)
        show_help_command_description "Install a script from repo/scripts into ~/.par-s-e/bins"
        echo
        show_help_command_usage "install [option] <script> [<alias>]"
        echo
        echo -e "${YELLOW}Arguments:${NC}"
        echo -e "$(printf "  ${GREEN}%-12s${NC} %s\n" "script" "The name of the script to install from the repository")"
        echo -e "$(printf "  ${GREEN}%-12s${NC} %s\n" "alias" "Optional: the name to use for the installed command (default: same as script)")"
        echo
        show_help_command_option
        ;;
    update)
        show_help_command_description "Update a single script if alias given, otherwise update all installed"
        echo
        show_help_command_usage "update [<name>]"
        echo
        echo -e "${YELLOW}Arguments:${NC}"
        echo -e "$(printf "  ${GREEN}%-12s${NC} %s\n" "name" "The installed script to update (can be either the script name or its alias)")"
        echo
        show_help_command_option
        ;;
    uninstall)
        show_help_command_description "Remove a previously installed script"
        echo
        show_help_command_usage "uninstall [option] <name>"
        echo
        echo -e "${YELLOW}Arguments:${NC}"
        echo -e "$(printf "  ${GREEN}%-12s${NC} %s\n" "name" "The installed script to remove (can be either the script name or its alias)")"
        echo
        show_help_command_option
        ;;
    catalog)
        show_help_command_description "Show all available/installed scripts"
        echo
        show_help_command_usage "catalog [option]"
        echo
        show_help_command_option
        ;;
    list)
        show_help_command_description "List commands"
        echo
        show_help_command_usage "list [option]"
        echo
        show_help_command_option
        ;;
    *)
        show_help
        ;;
    esac
}
is_alias_script() {
    local alias="$1"
    alias_file_exists=0
    [ -f "$DST_BIN_DIR/$alias" ] && alias_file_exists=1
    alias_db_exists=0
    grep -q -E "^${alias}[[:space:]]" "$DB_SCRIPTS_FILE" && alias_db_exists=1
    if [ $alias_file_exists -eq 1 ] || [ $alias_db_exists -eq 1 ]; then
        return 0
    fi
    return 1
}
is_alias_shims() {
    local alias="$1"
    alias_file_exists=0
    [ -f "$DST_SHIMS_DIR/$alias" ] && alias_file_exists=1
    alias_db_exists=0
    grep -q -E "^${alias}[[:space:]]" "$DB_SHIMS_FILE" && alias_db_exists=1
    if [ $alias_file_exists -eq 1 ] || [ $alias_db_exists -eq 1 ]; then
        return 0
    fi
    return 1
}
is_alias_script_or_shims() {
    is_alias_script $1 || is_alias_shims $1
}
is_script() {
    [ -f "$SRC_SCRIPTS_DIR/$1" ]
}
is_shims() {
    [ -f "$SRC_SHIMS_DIR/$1" ]
}
is_script_or_shims() {
    is_script $1 || is_shims $1
}
get_script_alias() {
    local source
    local alias="$1"
    source=$(grep -E "^${alias}[[:space:]]" "$DB_SCRIPTS_FILE" | awk '{print $2}')
    echo "$source"
}
get_shims_alias() {
    local source
    local alias="$1"
    source=$(grep -E "^${alias}[[:space:]]" "$DB_SHIMS_FILE" | awk '{print $2}')
    echo "$source"
}
get_script_or_shims_alias() {
    local source
    source="$(get_script_alias "$1")"
    if [ -n "$source" ]; then
        echo "$source"
        return 0
    fi
    source="$(get_shims_alias "$1")"
    echo "$source"
}
is_shims_installed() {
    local source="$1"
    [ -n "$(grep -E "[[:space:]]${source}$" "$DB_SHIMS_FILE")" ]
}

# --- Generic functions ---
install_generic() {
    local src=$1
    local alias=$2
    local src_dir=$3
    local dst_dir=$4
    local db_file=$5

    echo -e "${GREEN_FLASH}●${NC} $source   ${YELLOW_FLASH}↳${NC} ${BRIGHT_YELLOW_FLASH}$alias${NC}"
    sleep 3

    cp "$src_dir/$src" "$dst_dir/$alias"
    chmod +x "$dst_dir/$alias"

    grep -v -E "^${alias}[[:space:]]" "$db_file" >"${db_file}.tmp" || true
    mv "${db_file}.tmp" "$db_file"
    echo -e "${alias}\t${src}" >>"$db_file"

    overwrite "\r${GREEN}●${NC} $source   ${YELLOW_BOLD}↳${NC} ${BRIGHT_YELLOW}$alias${NC}"
}
update_one_generic() {
    local source="$1"
    local alias="$2"
    local src_dir="$3"
    local dst_dir="$4"
    if [ ! -f "$src_dir/$source" ]; then
        echo -e "${RED}✖${NC} Source script '$source' no longer exists in repo."
        return 1
    fi

    echo -e "${YELLOW_FLASH}●${NC} $source   ${YELLOW_FLASH}↳${NC} ${BRIGHT_YELLOW_FLASH}$alias${NC}"
    sleep 3
    cp "$src_dir/$source" "$dst_dir/$alias"
    chmod +x "$dst_dir/$alias"
    overwrite "\r${GREEN}●${NC} $source   ${YELLOW_BOLD}↳${NC} ${BRIGHT_YELLOW}$alias${NC}"
}
update_all_generic() {
    local db_file="$1"
    local src_dir="$2"
    local dst_dir="$3"
    local updated_alias=""
    local source_alias=""
    while IFS=$'\t' read -r alias source; do
        [ -z "$alias" ] && continue
        if [ -f "$src_dir/$source" ]; then
            echo -e "${YELLOW_FLASH}●${NC} $source   ${YELLOW_FLASH}↳${NC} ${BRIGHT_YELLOW_FLASH}$alias${NC}"
            sleep 3
            cp "$src_dir/$source" "$dst_dir/$alias"
            chmod +x "$dst_dir/$alias"
            overwrite "\r${GREEN}●${NC} $source   ${YELLOW_BOLD}↳${NC} ${BRIGHT_YELLOW}$alias${NC}"
            if is_shims "$source"; then
                if [ -z "$updated_alias" ]; then
                    updated_alias="$alias"
                else
                    updated_alias="$updated_alias, $alias"
                fi
                if [ -z "$source_alias" ]; then
                    source_alias="    ${CYAN}source $dst_dir/$alias${NC}"
                else
                    source_alias="$source_alias\n    ${CYAN}source $dst_dir/$alias${NC}"
                fi
            fi
        else
            echo -e "${YELLOW_BOLD}‼ Source '$source' for alias '$alias' no longer exists${NC}"
        fi
    done <"$db_file"

    if [ -z "$updated_alias" ]; then
        return 0
    fi
    echo
    echo -e "${GREEN}$updated_alias${NC} has been updated."
    echo
    echo -e "Restart your shell or run:"
    echo -e "  ${CYAN}source \"$SHIMS_SOURCE_FILE\"${NC}"
    echo -e "to apply the changes."
}
uninstall_generic() {
    local alias="$1"
    local dst_dir="$2"
    local db_file="$3"

    alias_is_shims=0
    [ -f "$DST_SHIMS_DIR/$alias" ] && alias_is_shims=1
    alias_file_exists=0
    [ -f "$dst_dir/$alias" ] && alias_file_exists=1
    alias_db_exists=0
    grep -q -E "^${alias}[[:space:]]" "$db_file" && alias_db_exists=1

    if [ $alias_file_exists -eq 1 ] || [ $alias_db_exists -eq 1 ]; then
        if [ $alias_db_exists -eq 1 ]; then
            source=$(grep -E "^${alias}[[:space:]]" "$db_file" | awk '{print $2}')
        fi
        echo -e "${RED_FLASH}●${NC} ${source:-"[source]"}   ${YELLOW_FLASH}↳${NC} ${BRIGHT_YELLOW_FLASH}$alias${NC}"
        sleep 3
        [ $alias_file_exists -eq 1 ] && rm "$dst_dir/$alias"
        if [ $alias_db_exists -eq 1 ]; then
            grep -v -E "^${alias}[[:space:]]" "$db_file" >"${db_file}.tmp"
            mv "${db_file}.tmp" "$db_file"
        fi
        overwrite "${CYAN}○${NC} ${source:-"[source]"}   ${YELLOW_BOLD}↳${NC} ${BRIGHT_YELLOW}$alias${NC}"
    else
        echo -e "${YELLOW_BOLD}‼ Script '$alias' not found.${NC}"
    fi
}
show_catalog_generic() {
    saved_file="$1"
    src_dir="$2"

    installed_list=""
    while IFS=$'\t' read -r alias source; do
        [ -z "$alias" ] && continue
        if echo "$installed_list" | grep -q "$source:"; then
            installed_list=${installed_list//\($source:\)\([^;]*\)/\1\2,$alias}
        else
            installed_list+="$source:$alias;"
        fi
    done <"$saved_file"

    for file in "$src_dir"/*; do
        file=$(basename $file)
        if echo "$installed_list" | grep -q "$file:"; then
            aliases_of_source=$(echo "$installed_list" | grep -o "$file:[^;]*" | sed "s|$file:||")
            alias_str=""
            IFS=',' read -r -a arr <<<"$aliases_of_source"
            for alias in "${arr[@]}"; do
                alias_str+="${YELLOW_BOLD}↳${NC} ${BRIGHT_YELLOW}$alias${NC}   "
            done
            alias_str=${alias_str//[[:space:]]*$/}
            echo -e "$(printf "  ${GREEN}●${NC} %-25s %s\n" "$file" "$alias_str")"
        else
            printf "  ${CYAN}○${NC} %-25s\n" "$file"
        fi
    done
}

# --------------------------
# COMMANDS
# --------------------------
install_script() {
    local source="$1"
    local alias="$2"

    if [ -z "$source" ]; then
        echo
        error_block "Not enough arguments (missing: \"script\")"
        echo
        show_help_command "install"
        exit 1
    fi

    echo -e "${BRIGHT_MAGENTA_BOLD}══════════════════ PAR-S-E ══════════════════${NC}"
    echo

    if ! is_script_or_shims "$source"; then
        echo -e "${RED}✖${NC} Script '$source' not found in repo."
        return 1
    fi

    if [ -z "$alias" ]; then
        alias=$(basename "$source")
        alias=$(strip_extension "$alias")
    fi
    if is_script "$source"; then
        install_generic "$source" "$alias" "$SRC_SCRIPTS_DIR" "$DST_BIN_DIR" "$DB_SCRIPTS_FILE"
    elif is_shims "$source"; then
        if is_shims_installed "$source"; then
            echo -e "${GREEN}$alias${NC} is already installed"
            echo
        else
            install_generic "$source" "$alias" "$SRC_SHIMS_DIR" "$DST_SHIMS_DIR" "$DB_SHIMS_FILE"
            echo "source \"$DST_SHIMS_DIR/$alias\"" >>"$SHIMS_SOURCE_FILE"
            echo
            echo -e "${GREEN}$alias${NC} has been installed."
        fi
        echo -e "Restart your shell or run:"
        echo -e "  ${CYAN}source \"$SHIMS_SOURCE_FILE\"${NC}"
        echo -e "to activate it."
    fi
}

update_one() {
    local alias="$1"
    local source
    source=$(get_script_or_shims_alias "$alias")
    [ -z "$source" ] && error "Alias '$alias' not found in neither script or shims installed DB"

    echo -e "${BRIGHT_MAGENTA_BOLD}══════════════════ PAR-S-E ══════════════════${NC}"
    echo

    if is_script "$source"; then
        update_one_generic "$source" "$alias" "$SRC_SCRIPTS_DIR" "$DST_BIN_DIR"
    elif is_shims "$source"; then
        update_one_generic "$source" "$alias" "$SRC_SHIMS_DIR" "$DST_SHIMS_DIR"
        echo
        echo -e "${GREEN}$alias${NC} has been updated."
        echo
        echo -e "Restart your shell or run:"
        echo -e "  ${CYAN}source \"$SHIMS_SOURCE_FILE\"${NC}"
        echo -e "to apply the changes."
    fi
}

update_all() {
    echo -e "${BRIGHT_MAGENTA_BOLD}══════════════════ PAR-S-E ══════════════════${NC}"

    echo
    echo -e "${CYAN}--- Scripts${NC}"
    update_all_generic "$DB_SCRIPTS_FILE" "$SRC_SCRIPTS_DIR" "$DST_BIN_DIR"
    echo
    echo -e "${CYAN}--- Shims${NC}"
    update_all_generic "$DB_SHIMS_FILE" "$SRC_SHIMS_DIR" "$DST_SHIMS_DIR"
}

uninstall_script() {
    local alias="$1"
    if [ -z "$alias" ]; then
        echo
        error_block "Not enough arguments (missing: \"name\")"
        echo
        show_help_command "uninstall"
        exit 1
    fi
    echo -e "${BRIGHT_MAGENTA_BOLD}══════════════════ PAR-S-E ══════════════════${NC}"
    echo
    if ! is_alias_script_or_shims "$alias"; then
        echo -e "${YELLOW_BOLD}‼ Script '$alias' not found.${NC}"
        return 1
    fi

    if is_alias_script "$alias"; then
        uninstall_generic "$alias" "$DST_BIN_DIR" "$DB_SCRIPTS_FILE"
    elif is_alias_shims "$alias"; then
        uninstall_generic "$alias" "$DST_SHIMS_DIR" "$DB_SHIMS_FILE"

        echo "source \"$DST_SHIMS_DIR/$alias\"" >>"$SHIMS_SOURCE_FILE"
        grep -v -E "^source \"$DST_SHIMS_DIR/$alias\"" "$SHIMS_SOURCE_FILE" >"${SHIMS_SOURCE_FILE}.tmp"
        mv "${SHIMS_SOURCE_FILE}.tmp" "$SHIMS_SOURCE_FILE"

        echo
        echo -e "Restart your shell or run:"
        echo -e "  ${CYAN}source \"$SHIMS_SOURCE_FILE\"${NC}"
        echo -e "to apply the changes."
    fi
}

show_catalog() {
    echo -e "${BRIGHT_MAGENTA_BOLD}══════════════════ PAR-S-E ══════════════════${NC}"
    echo
    echo -e "Legend:  ${CYAN}○ available${NC}   ${GREEN}● installed${NC}   ${YELLOW_BOLD}↳ alias${NC}"
    echo
    echo -e "${CYAN}--- Scripts${NC}"
    show_catalog_generic "$DB_SCRIPTS_FILE" "$SRC_SCRIPTS_DIR"
    echo
    echo -e "${CYAN}--- Shims${NC}"
    show_catalog_generic "$DB_SHIMS_FILE" "$SRC_SHIMS_DIR"
}

# --------------------------
# HELPER: detect --help or -h in args
# --------------------------
check_help() {
    for arg in "$@"; do
        case "$arg" in
        --help | -h) return 0 ;;
        esac
    done
    return 1
}

# --------------------------
# DISPATCHER
# --------------------------
case "$1" in
install | update | uninstall | catalog)
    cmd="$1"
    shift
    if check_help "$@"; then
        show_help_command "$cmd"
        exit 1
    fi

    case "$cmd" in
    install) install_script "$@" ;;
    update)
        if [ -z "$1" ]; then
            update_all
        else
            update_one "$1"
        fi
        ;;
    uninstall) uninstall_script "$@" ;;
    catalog) show_catalog "$@" ;;
    esac
    ;;
list)
    shift
    if check_help "$@"; then
        show_help
        exit 1
    fi
    if [ -n "$1" ]; then
        show_help_command "$1"
        exit 1
    fi
    show_help
    ;;
help | "--help" | "-h" | "")
    shift
    if [ -n "$1" ]; then
        show_help_command "$1"
        exit 1
    fi
    show_help
    ;;
*)
    echo -e "${RED}Unknown command:${NC} $1"
    echo
    show_help
    exit 1
    ;;
esac
